//
// Created by TEUGUIA TADJUIDJE Rodolf SÃ©deris on 4/13/2024 at 5:13:20 PM.
// Copyright (c) 2024 Rihen. All rights reserved.
//

#include "pch/ntspch.h"
#include "GenericInput.h"

#include <cstring>

namespace nkentseu {

	std::string GenericInput::GetButton(Button button) {
#define BUTTON_NAME(button_id) if (button == GenericInput::Buttons::button_id) return #button_id

		BUTTON_NAME(B0);
		BUTTON_NAME(B1);
		BUTTON_NAME(B2);
		BUTTON_NAME(B3);
		BUTTON_NAME(B4);
		BUTTON_NAME(B5);
		BUTTON_NAME(B6);
		BUTTON_NAME(B7);
		BUTTON_NAME(B8);
		BUTTON_NAME(B9);
		BUTTON_NAME(B10);
		BUTTON_NAME(B11);
		BUTTON_NAME(B12);
		BUTTON_NAME(B13);
		BUTTON_NAME(B14);
		BUTTON_NAME(B15);
		BUTTON_NAME(B16);
		BUTTON_NAME(B17);
		BUTTON_NAME(B18);
		BUTTON_NAME(B19);
		BUTTON_NAME(B20);
		BUTTON_NAME(B21);
		BUTTON_NAME(B22);
		BUTTON_NAME(B23);
		BUTTON_NAME(B24);
		BUTTON_NAME(B25);
		BUTTON_NAME(B26);
		BUTTON_NAME(B27);
		BUTTON_NAME(B28);
		BUTTON_NAME(B29);
		BUTTON_NAME(B30);
		BUTTON_NAME(B31);
		BUTTON_NAME(B32);
		BUTTON_NAME(B33);
		BUTTON_NAME(B34);
		BUTTON_NAME(B35);
		BUTTON_NAME(B36);
		BUTTON_NAME(B37);
		BUTTON_NAME(B38);
		BUTTON_NAME(B39);
		BUTTON_NAME(B40);
		BUTTON_NAME(B41);
		BUTTON_NAME(B42);
		BUTTON_NAME(B43);
		BUTTON_NAME(B44);
		BUTTON_NAME(B45);
		BUTTON_NAME(B46);
		BUTTON_NAME(B47);
		BUTTON_NAME(B48);
		BUTTON_NAME(B49);
		BUTTON_NAME(B50);
		BUTTON_NAME(B51);
		BUTTON_NAME(B52);
		BUTTON_NAME(B53);
		BUTTON_NAME(B54);
		BUTTON_NAME(B55);
		BUTTON_NAME(B56);
		BUTTON_NAME(B57);
		BUTTON_NAME(B58);
		BUTTON_NAME(B59);
		BUTTON_NAME(B60);
		BUTTON_NAME(B61);
		BUTTON_NAME(B62);
		BUTTON_NAME(B63);
		BUTTON_NAME(B64);
		BUTTON_NAME(B65);
		BUTTON_NAME(B66);
		BUTTON_NAME(B67);
		BUTTON_NAME(B68);
		BUTTON_NAME(B69);
		BUTTON_NAME(B70);
		BUTTON_NAME(B71);
		BUTTON_NAME(B72);
		BUTTON_NAME(B73);
		BUTTON_NAME(B74);
		BUTTON_NAME(B75);
		BUTTON_NAME(B76);
		BUTTON_NAME(B77);
		BUTTON_NAME(B78);
		BUTTON_NAME(B79);
		BUTTON_NAME(B80);
		BUTTON_NAME(B81);
		BUTTON_NAME(B82);
		BUTTON_NAME(B83);
		BUTTON_NAME(B84);
		BUTTON_NAME(B85);
		BUTTON_NAME(B86);
		BUTTON_NAME(B87);
		BUTTON_NAME(B88);
		BUTTON_NAME(B89);
		BUTTON_NAME(B90);
		BUTTON_NAME(B91);
		BUTTON_NAME(B92);
		BUTTON_NAME(B93);
		BUTTON_NAME(B94);
		BUTTON_NAME(B95);
		BUTTON_NAME(B96);
		BUTTON_NAME(B97);
		BUTTON_NAME(B98);
		BUTTON_NAME(B99);
		BUTTON_NAME(B100);
		BUTTON_NAME(B101);
		BUTTON_NAME(B102);
		BUTTON_NAME(B103);
		BUTTON_NAME(B104);
		BUTTON_NAME(B105);
		BUTTON_NAME(B106);
		BUTTON_NAME(B107);
		BUTTON_NAME(B108);
		BUTTON_NAME(B109);
		BUTTON_NAME(B110);
		BUTTON_NAME(B111);
		BUTTON_NAME(B112);
		BUTTON_NAME(B113);
		BUTTON_NAME(B114);
		BUTTON_NAME(B115);
		BUTTON_NAME(B116);
		BUTTON_NAME(B117);
		BUTTON_NAME(B118);
		BUTTON_NAME(B119);
		BUTTON_NAME(B120);
		BUTTON_NAME(B121);
		BUTTON_NAME(B122);
		BUTTON_NAME(B123);
		BUTTON_NAME(B124);
		BUTTON_NAME(B125);
		BUTTON_NAME(B126);
		BUTTON_NAME(B127);
		BUTTON_NAME(B128);

		return "NotDefine";
	}

	GenericInput::Button GenericInput::GetButton(const std::string& button) {
#define CASE_BUTTON(button_id) if (strcmp(button.c_str(), #button_id) == 0) return GenericInput::Buttons::button_id

		CASE_BUTTON(B0);
		CASE_BUTTON(B1);
		CASE_BUTTON(B2);
		CASE_BUTTON(B3);
		CASE_BUTTON(B4);
		CASE_BUTTON(B5);
		CASE_BUTTON(B6);
		CASE_BUTTON(B7);
		CASE_BUTTON(B8);
		CASE_BUTTON(B9);
		CASE_BUTTON(B10);
		CASE_BUTTON(B11);
		CASE_BUTTON(B12);
		CASE_BUTTON(B13);
		CASE_BUTTON(B14);
		CASE_BUTTON(B15);
		CASE_BUTTON(B16);
		CASE_BUTTON(B17);
		CASE_BUTTON(B18);
		CASE_BUTTON(B19);
		CASE_BUTTON(B20);
		CASE_BUTTON(B21);
		CASE_BUTTON(B22);
		CASE_BUTTON(B23);
		CASE_BUTTON(B24);
		CASE_BUTTON(B25);
		CASE_BUTTON(B26);
		CASE_BUTTON(B27);
		CASE_BUTTON(B28);
		CASE_BUTTON(B29);
		CASE_BUTTON(B30);
		CASE_BUTTON(B31);
		CASE_BUTTON(B32);
		CASE_BUTTON(B33);
		CASE_BUTTON(B34);
		CASE_BUTTON(B35);
		CASE_BUTTON(B36);
		CASE_BUTTON(B37);
		CASE_BUTTON(B38);
		CASE_BUTTON(B39);
		CASE_BUTTON(B40);
		CASE_BUTTON(B41);
		CASE_BUTTON(B42);
		CASE_BUTTON(B43);
		CASE_BUTTON(B44);
		CASE_BUTTON(B45);
		CASE_BUTTON(B46);
		CASE_BUTTON(B47);
		CASE_BUTTON(B48);
		CASE_BUTTON(B49);
		CASE_BUTTON(B50);
		CASE_BUTTON(B51);
		CASE_BUTTON(B52);
		CASE_BUTTON(B53);
		CASE_BUTTON(B54);
		CASE_BUTTON(B55);
		CASE_BUTTON(B56);
		CASE_BUTTON(B57);
		CASE_BUTTON(B58);
		CASE_BUTTON(B59);
		CASE_BUTTON(B60);
		CASE_BUTTON(B61);
		CASE_BUTTON(B62);
		CASE_BUTTON(B63);
		CASE_BUTTON(B64);
		CASE_BUTTON(B65);
		CASE_BUTTON(B66);
		CASE_BUTTON(B67);
		CASE_BUTTON(B68);
		CASE_BUTTON(B69);
		CASE_BUTTON(B70);
		CASE_BUTTON(B71);
		CASE_BUTTON(B72);
		CASE_BUTTON(B73);
		CASE_BUTTON(B74);
		CASE_BUTTON(B75);
		CASE_BUTTON(B76);
		CASE_BUTTON(B77);
		CASE_BUTTON(B78);
		CASE_BUTTON(B79);
		CASE_BUTTON(B80);
		CASE_BUTTON(B81);
		CASE_BUTTON(B82);
		CASE_BUTTON(B83);
		CASE_BUTTON(B84);
		CASE_BUTTON(B85);
		CASE_BUTTON(B86);
		CASE_BUTTON(B87);
		CASE_BUTTON(B88);
		CASE_BUTTON(B89);
		CASE_BUTTON(B90);
		CASE_BUTTON(B91);
		CASE_BUTTON(B92);
		CASE_BUTTON(B93);
		CASE_BUTTON(B94);
		CASE_BUTTON(B95);
		CASE_BUTTON(B96);
		CASE_BUTTON(B97);
		CASE_BUTTON(B98);
		CASE_BUTTON(B99);
		CASE_BUTTON(B100);
		CASE_BUTTON(B101);
		CASE_BUTTON(B102);
		CASE_BUTTON(B103);
		CASE_BUTTON(B104);
		CASE_BUTTON(B105);
		CASE_BUTTON(B106);
		CASE_BUTTON(B107);
		CASE_BUTTON(B108);
		CASE_BUTTON(B109);
		CASE_BUTTON(B110);
		CASE_BUTTON(B111);
		CASE_BUTTON(B112);
		CASE_BUTTON(B113);
		CASE_BUTTON(B114);
		CASE_BUTTON(B115);
		CASE_BUTTON(B116);
		CASE_BUTTON(B117);
		CASE_BUTTON(B118);

		return GenericInput::Buttons::NotDefine;
	}

	std::string GenericInput::GetAxis(Axis axis) {
#define AXIS_NAME(axis_id) if (axis == GenericInput::Axes::axis_id) return #axis_id

		AXIS_NAME(A0);
		AXIS_NAME(A1);
		AXIS_NAME(A2);
		AXIS_NAME(A3);
		AXIS_NAME(A4);
		AXIS_NAME(A5);
		AXIS_NAME(A6);
		AXIS_NAME(A7);
		AXIS_NAME(A8);
		AXIS_NAME(A9);
		AXIS_NAME(A10);
		AXIS_NAME(A11);
		AXIS_NAME(A12);
		AXIS_NAME(A13);
		AXIS_NAME(A14);
		AXIS_NAME(A15);
		AXIS_NAME(A16);
		AXIS_NAME(A17);
		AXIS_NAME(A18);
		AXIS_NAME(A19);
		AXIS_NAME(A20);
		AXIS_NAME(A21);
		AXIS_NAME(A22);
		AXIS_NAME(A23);
		AXIS_NAME(A24);
		AXIS_NAME(A25);
		AXIS_NAME(A26);
		AXIS_NAME(A27);
		AXIS_NAME(A28);
		AXIS_NAME(A29);
		AXIS_NAME(A30);
		AXIS_NAME(A31);
		AXIS_NAME(A32);
		AXIS_NAME(A33);
		AXIS_NAME(A34);
		AXIS_NAME(A35);
		AXIS_NAME(A36);
		AXIS_NAME(A37);
		AXIS_NAME(A38);
		AXIS_NAME(A39);
		AXIS_NAME(A40);
		AXIS_NAME(A41);
		AXIS_NAME(A42);
		AXIS_NAME(A43);
		AXIS_NAME(A44);
		AXIS_NAME(A45);
		AXIS_NAME(A46);
		AXIS_NAME(A47);
		AXIS_NAME(A48);
		AXIS_NAME(A49);
		AXIS_NAME(A50);
		AXIS_NAME(A51);
		AXIS_NAME(A52);
		AXIS_NAME(A53);
		AXIS_NAME(A54);
		AXIS_NAME(A55);
		AXIS_NAME(A56);
		AXIS_NAME(A57);
		AXIS_NAME(A58);
		AXIS_NAME(A59);
		AXIS_NAME(A60);
		AXIS_NAME(A61);
		AXIS_NAME(A62);
		AXIS_NAME(A63);
		AXIS_NAME(A64);
		AXIS_NAME(A65);
		AXIS_NAME(A66);
		AXIS_NAME(A67);
		AXIS_NAME(A68);
		AXIS_NAME(A69);
		AXIS_NAME(A70);
		AXIS_NAME(A71);
		AXIS_NAME(A72);
		AXIS_NAME(A73);
		AXIS_NAME(A74);
		AXIS_NAME(A75);
		AXIS_NAME(A76);
		AXIS_NAME(A77);
		AXIS_NAME(A78);
		AXIS_NAME(A79);

		return "NotDefine";
	}

	GenericInput::Axis GenericInput::GetAxis(const std::string& axis) {
#define CASE_AXIS(axis_id) if (strcmp(axis.c_str(), #axis_id) == 0) return GenericInput::Axes::axis_id

		CASE_AXIS(A0);
		CASE_AXIS(A1);
		CASE_AXIS(A2);
		CASE_AXIS(A3);
		CASE_AXIS(A4);
		CASE_AXIS(A5);
		CASE_AXIS(A6);
		CASE_AXIS(A7);
		CASE_AXIS(A8);
		CASE_AXIS(A9);
		CASE_AXIS(A10);
		CASE_AXIS(A11);
		CASE_AXIS(A12);
		CASE_AXIS(A13);
		CASE_AXIS(A14);
		CASE_AXIS(A15);
		CASE_AXIS(A16);
		CASE_AXIS(A17);
		CASE_AXIS(A18);
		CASE_AXIS(A19);
		CASE_AXIS(A20);
		CASE_AXIS(A21);
		CASE_AXIS(A22);
		CASE_AXIS(A23);
		CASE_AXIS(A24);
		CASE_AXIS(A25);
		CASE_AXIS(A26);
		CASE_AXIS(A27);
		CASE_AXIS(A28);
		CASE_AXIS(A29);
		CASE_AXIS(A30);
		CASE_AXIS(A31);
		CASE_AXIS(A32);
		CASE_AXIS(A33);
		CASE_AXIS(A34);
		CASE_AXIS(A35);
		CASE_AXIS(A36);
		CASE_AXIS(A37);
		CASE_AXIS(A38);
		CASE_AXIS(A39);
		CASE_AXIS(A40);
		CASE_AXIS(A41);
		CASE_AXIS(A42);
		CASE_AXIS(A43);
		CASE_AXIS(A44);
		CASE_AXIS(A45);
		CASE_AXIS(A46);
		CASE_AXIS(A47);
		CASE_AXIS(A48);
		CASE_AXIS(A49);
		CASE_AXIS(A50);
		CASE_AXIS(A51);
		CASE_AXIS(A52);
		CASE_AXIS(A53);
		CASE_AXIS(A54);
		CASE_AXIS(A55);
		CASE_AXIS(A56);
		CASE_AXIS(A57);
		CASE_AXIS(A58);
		CASE_AXIS(A59);
		CASE_AXIS(A60);
		CASE_AXIS(A61);
		CASE_AXIS(A62);
		CASE_AXIS(A63);
		CASE_AXIS(A64);
		CASE_AXIS(A65);
		CASE_AXIS(A66);
		CASE_AXIS(A67);
		CASE_AXIS(A68);
		CASE_AXIS(A69);
		CASE_AXIS(A70);
		CASE_AXIS(A71);
		CASE_AXIS(A72);
		CASE_AXIS(A73);
		CASE_AXIS(A74);
		CASE_AXIS(A75);
		CASE_AXIS(A76);
		CASE_AXIS(A77);
		CASE_AXIS(A78);
		CASE_AXIS(A79);

		return GenericInput::Axes::NotDefine;
	}

	std::string GenericInput::GetHat(Hat hate) {
#define HAT_NAME(hat_id) if (hate == Hats::hat_id) return #hat_id

		HAT_NAME(Down);
		HAT_NAME(Up);
		HAT_NAME(Left);
		HAT_NAME(Right);

		return "NotDefine";
	}

	GenericInput::Hat GenericInput::GetHat(const std::string& hat) {
#define CASE_HAT(hat_id) if (strcmp(hat.c_str(), #hat_id) == 0) return Hats::hat_id

		CASE_HAT(Down);
		CASE_HAT(Up);
		CASE_HAT(Left);
		CASE_HAT(Right);

		return Hats::NotDefine;
	}

}    // namespace nkentseu